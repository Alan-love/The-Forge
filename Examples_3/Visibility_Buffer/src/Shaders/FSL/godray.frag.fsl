/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// USERMACRO: SAMPLE_COUNT [1,2,4]

#ifndef SAMPLE_COUNT
    #define SAMPLE_COUNT 1
#endif

#include "VisibilityBufferResources.h.fsl"
#include "GLobal.srt.h"
#include "VisibilityBufferResourcesUtil.h.fsl"



STRUCT(PsIn)
{
	DATA(float4, position, SV_Position);
	DATA(float2, texCoord, TEXCOORD);
#if FT_MULTIVIEW
    DATA(FLAT(uint), ViewID, TEXCOORD3);
#endif
};

STRUCT(FSOutput)
{
	DATA(float4, result, SV_Target);
};

float GetShadowFactor(
#if FT_MULTIVIEW
	uint viewID,
#endif
	float3 position
)
{
#if FT_MULTIVIEW
	float4 posLS = mul(gPerFrameVBConstants.transform[VIEW_SHADOW].vp.mat[viewID], float4(position, 1.0f));
#else
	float4 posLS = mul(gPerFrameVBConstants.transform[VIEW_SHADOW].vp.mat, float4(position, 1.0f));
#endif

	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + float2(0.5, 0.5);

	float2 HalfGaps = float2(0.00048828125, 0.00048828125);

	posLS.xy += HalfGaps;

	float shadowFactor = 0.0f;

	if( all(GreaterThan(posLS.xy, 0)) && all(LessThan(posLS.xy, 1)))
	{
		float CShadow = SampleLvlTex2D(gShadowMap, gTextureFilter, posLS.xy, 0).r;
		float esm = exp((CShadow - posLS.z) * gPerFrameConstants.esmControl);
		shadowFactor = saturate(2.0 - esm);
	}

	return shadowFactor;
}

float PhaseHenyeyGreenstein(float VoL)
{
    float g = gPerFrameConstants.mGodRayScatterFactor;
    float nom = 1 - g * g;
    float denom = 4 * PI * pow(1 + g * g - 2 * g * VoL, 1.5);
    return nom / denom;
}

STATIC const float ditherOffsets[16] = 
{
	0.0f,   0.75f,  0.1875f, 0.9375f,
	0.5f,   0.25f,  0.6875f, 0.4375f,
	0.125f, 0.875f, 0.0625f, 0.8125f,
	0.625f, 0.375f, 0.5625f, 0.3125f
};

#if(SAMPLE_COUNT > 1)
EARLY_FRAGMENT_TESTS
#endif
ROOT_SIGNATURE(DefaultRootSignature)
FSOutput PS_MAIN( PsIn In, SV_SampleIndex(uint) sampleIndex)
{
    INIT_MAIN;
    FSOutput Out;

	float depth = 0.0f;
#if SAMPLE_COUNT > 1
	for (uint i = 0; i < SAMPLE_COUNT; ++i)
	{
#if FT_MULTIVIEW
		depth += LoadTex2DArrayMS(gDepthTex, gTextureFilter, uint3(In.position.xy * GODRAY_SCALE, In.ViewID), i).r;
#else
		depth += LoadTex2DMS(gDepthTex, gTextureFilter, uint2(In.position.xy * GODRAY_SCALE), i).r;
#endif // FT_MULTIVIEW
	}
	depth /= SAMPLE_COUNT;
#else

#if FT_MULTIVIEW
	depth = SampleLvlTex2DArray(gDepthTex, gTextureFilter, uint3(In.texCoord, In.ViewID), 0).r;
#else
	depth = SampleLvlTex2D(gDepthTex, gTextureFilter, In.texCoord, 0).r;
#endif // FT_MULTIVIEW

#endif // SAMPLE_COUNT > 1

	float3 color = float3(0.0f, 0.0f, 0.0f);
#if FT_MULTIVIEW
	float4 WorldPosW = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].invVP.mat[In.ViewID], float4((In.texCoord * 2.0f - 1.0f) * float2(1.0f, -1.0f), depth, 1.0f));
#else
	float4 WorldPosW = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].invVP.mat, float4((In.texCoord * 2.0f - 1.0f) * float2(1.0f, -1.0f), depth, 1.0f));
#endif

	float3 rayStart = gPerFrameConstants.camPos.xyz;
	float3 rayEnd = WorldPosW.xyz / WorldPosW.w;

	float3 L = -gPerFrameConstants.lightDir.xyz;

	float3 marchDir = normalize(rayEnd - rayStart);
	float3 marchStep = (rayEnd - rayStart) / 10;

	int2 ditherIdx = int2(fmod((In.texCoord) / gPerFrameConstants.twoOverRes, 4.0f));
	float offset = ditherOffsets[ditherIdx.x * 4 + ditherIdx.y];

	float3 samplePos = rayStart + offset * marchStep;

	for(int j = 0; j < GODRAY_STEPS; j++)
	{
#if FT_MULTIVIEW
		float shadowFactor = GetShadowFactor(In.ViewID, samplePos);
#else
		float shadowFactor = GetShadowFactor(samplePos);
#endif

		color += PhaseHenyeyGreenstein(dot(marchDir, L)) * shadowFactor;

		samplePos += marchStep;
	}
	Out.result = float4(color, 1.0f);
	
    RETURN(Out);
}