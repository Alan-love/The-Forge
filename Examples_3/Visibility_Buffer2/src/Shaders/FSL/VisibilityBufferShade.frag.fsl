/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// USERMACRO: SAMPLE_COUNT [1,2,4]
// Uncomment this definition to use ray differentials method for calculating
// gradients instead of screen-space projected triangles method.
// #define USE_RAY_DIFFERENTIALS

#include "../../../../../Common_3/Renderer/VisibilityBuffer2/Shaders/FSL/VisibilityBufferShadingUtilities.h.fsl"

#include "TriangleBinning.h.fsl"
#include "DebugVisualize.h.fsl"
#include "VisibilityBufferResources.h.fsl"
#include "Global.srt.h"

// This shader loads draw / triangle Id per pixel and reconstruct interpolated vertex data.

STRUCT(VSOutput)
{
	DATA(float4, position, SV_Position);
	DATA(float2, screenPos, TEXCOORD0);
};

// Static descriptors




ROOT_SIGNATURE(DefaultRootSignature)
float4 PS_MAIN( VSOutput In, SV_SampleIndex(uint) i )
{
    INIT_MAIN;

    float2   binCoord = float2(In.position.x / BIN_SIZE, In.position.y / BIN_SIZE);
    uint     tx = uint(binCoord[0]);
    uint     ty = uint(binCoord[1]);
    uint     triangleCount = gBinBuffer[BinBufferViewOffset(VIEW_CAMERA) + TIDX(tx, ty)];
    float    binOccupancy = triangleCount / float(TILE_CAPACITY);
    uint     index = VisibilityBufferOffset(VIEW_CAMERA, gPerFrameConstants.depthTexSize[0], In.position.x, In.position.y);
    uint64_t packedDepthVBId = gVisibilityBuffer[index];

	uint triangleData = 0;
	float depth = 0.0f;
	unpackDepthVBId(packedDepthVBId, depth, triangleData);
	uint triangleIndex = GetTriIndexFromTriData(triangleData);

	// Early exit if this pixel doesn't contain triangle data
	if (INVALID_TRIANGLE_DATA == triangleData)
    {
#if defined(_DEBUG)
        if (gPerFrameConstants.visualizeBinTriangleCount > 0 || gPerFrameConstants.visualizeBinOccupancy > 0)
        {
            float3 debugColor = debugVisualizeSimple(
				int2(In.position.xy), binCoord, triangleCount, binOccupancy, uint(BIN_SIZE),
				bool(gPerFrameConstants.visualizeBinTriangleCount), bool(gPerFrameConstants.visualizeBinOccupancy));

            RETURN(float4(debugColor, 1.0));
        }
        else
#endif
        {
            discard;
        }
	}

	// Extract packed data
	uint batchID = GetBatchIdFromTriData(triangleData);
	uint alpha1_opaque0 = GetGeomSetFromTriData(triangleData);

	uint index0 = LoadByte(gIndexDataBuffer, (triangleIndex * 3 + 0) << 2);
	uint index1 = LoadByte(gIndexDataBuffer, (triangleIndex * 3 + 1) << 2);
	uint index2 = LoadByte(gIndexDataBuffer, (triangleIndex * 3 + 2) << 2);

	// Load vertex data of the 3 vertices
	float3 v0pos = asfloat(LoadByte4(gVertexPositionBuffer, index0 * 12)).xyz;
	float3 v1pos = asfloat(LoadByte4(gVertexPositionBuffer, index1 * 12)).xyz;
	float3 v2pos = asfloat(LoadByte4(gVertexPositionBuffer, index2 * 12)).xyz;

	// Transform positions to clip space
	float4 pos0 = mul(gVBViewConstants.transform[VIEW_CAMERA].mvp, float4(v0pos, 1.0f));
	float4 pos1 = mul(gVBViewConstants.transform[VIEW_CAMERA].mvp, float4(v1pos, 1.0f));
	float4 pos2 = mul(gVBViewConstants.transform[VIEW_CAMERA].mvp, float4(v2pos, 1.0f));

	float4 wPos0 = mul(gVBViewConstants.transform[VIEW_CAMERA].invVP,pos0);
	float4 wPos1 = mul(gVBViewConstants.transform[VIEW_CAMERA].invVP,pos1);
	float4 wPos2 = mul(gVBViewConstants.transform[VIEW_CAMERA].invVP,pos2);

	float2 two_over_windowsize = gPerFrameConstants.twoOverRes;

	// Compute partial derivatives and baycentric coordinates.
	// This is necessary to interpolate triangle attributes per pixel.
#if defined(USE_RAY_DIFFERENTIALS)
    float4x4 projInv = InverseProjectionMatrixPerspectiveReverseZ(gVBViewConstants.transform[VIEW_CAMERA].projection);
    float4x4 viewInv = mul(gVBViewConstants.transform[VIEW_CAMERA].invVP, gVBViewConstants.transform[VIEW_CAMERA].projection);
	BarycentricDeriv derivativesOut = CalcRayBary(wPos0.xyz, wPos1.xyz, wPos2.xyz, In.screenPos, gPerFrameConstants.camPos.xyz, viewInv, projInv, two_over_windowsize);
#else
	BarycentricDeriv derivativesOut = CalcFullBary(pos0, pos1, pos2, In.screenPos, two_over_windowsize);
#endif /*USE_RAY_DIFFERENTIALS*/

    f3x2 texCoords = make_f3x2_cols(
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index0 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index1 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index2 << 2)) 
	);

	// Interpolated 1/w (one_over_w) for all three vertices of the triangle
	// using the barycentric coordinates and the delta vector
	float w = dot(float3(pos0.w, pos1.w, pos2.w),derivativesOut.m_lambda);

	// Reconstruct the Z value at this screen point performing only the necessary matrix * vector multiplication
	// operations that involve computing Z
    float z = w * getElem(gVBViewConstants.transform[VIEW_CAMERA].projection, 2, 2) + getElem(gVBViewConstants.transform[VIEW_CAMERA].projection, 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using In.screenPos and the computed Z value at this point.
	// Then, multiplying the perspective projected coordinates by the inverse view-projection matrix (invVP) produces world coordinates
	float3 position = mul(gVBViewConstants.transform[VIEW_CAMERA].invVP, float4(In.screenPos * w, z, w)).xyz;

	// Get the material id from the per batch indirection data buffer. 
	uint materialID = gMeshConstantsBuffer[batchID].materialID;
	// uint batchData = gIndirectFilteredBatches[BATCH_DISPATCH_ARGUMENTS_OFFSET + batchID];
	// uint materialID = (batchData & MATERIAL_ID_MASK);

	// Interpolate texture coordinates and calculate the gradients for texture sampling with mipmapping support
	GradientInterpolationResults results = Interpolate2DWithDeriv(derivativesOut,texCoords);
	
	float2 texCoordDX = results.dx;
	float2 texCoordDY = results.dy;
	float2 texCoord = results.interp;

	// CALCULATE PIXEL COLOR USING INTERPOLATED ATTRIBUTES
	// Reconstruct normal map Z from X and Y
	// "NonUniformResourceIndex" is a "pseudo" function see
	// http://asawicki.info/news_1608_direct3d_12_-_watch_out_for_non-uniform_resource_index.html

	// Get textures from arrays.
	float4 normalMapData;
	float4 diffuseColor;
	float4 specularColor;
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		normalMapData = SampleGradTex2D(gNormalMaps[materialID],   gSamplerTrilinearWrap, texCoord, texCoordDX, texCoordDY);
		diffuseColor  = SampleGradTex2D(gdiffuseMaps[materialID],  gSamplerTrilinearWrap, texCoord, texCoordDX, texCoordDY);
		specularColor = SampleGradTex2D(gSpecularMaps[materialID], gSamplerTrilinearWrap, texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	float3 reconstructedNormalMap;
	reconstructedNormalMap.xy = normalMapData.ga * 2.0f - 1.0f;
	reconstructedNormalMap.z = sqrt(saturate(1.0f - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy)));

	// NORMAL INTERPOLATION
	float3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index0 << 2))),
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index1 << 2))),
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index2 << 2)))
	);
	float3 normal = normalize(InterpolateWithDeriv_float3x3(derivativesOut, normals));
	
	//Calculate pixel normal and tangent vectors
	f3x3 wPositions = make_f3x3_cols(
			wPos0.xyz,
			wPos1.xyz,
			wPos2.xyz
	);

	DerivativesOutput wPosDer = Cal3DDeriv(derivativesOut, wPositions);
	DerivativesOutput uvDer = { float3(results.dx, 0.0),  float3(results.dy, 0.0) };
	normal = perturb_normal(reconstructedNormalMap, normal, wPosDer, uvDer);
	
	float Roughness = clamp(specularColor.a, 0.05f, 0.99f);
	float Metallic = specularColor.b;

	float ao = calculateAoContrib(
		gPerFrameConstants.depthTexSize,
		gPerFrameConstants.aoIntensity,
		gPerFrameConstants.aoQuality,
		gPerFrameConstants.CameraPlane.y,
		gPerFrameConstants.CameraPlane.x,
		gPerFrameConstants.frustumPlaneSizeNormalized,
		In.position.xy,
		gDepthTex,
		gSamplerTrilinearClamp);

	bool isTwoSided = (alpha1_opaque0 == 1) && bool(gMeshConstantsBuffer[materialID].twoSided);
	float3 ViewVec = normalize(gPerFrameConstants.camPos.xyz - position.xyz);
	float NoV = dot(normal, ViewVec);
	
	// if it is backface NoV should be < 0.0f 
	if (isTwoSided && NoV < 0.0f)
	{
		//flip normal
		normal = -normal;
		NoV = dot(normal, ViewVec);
	}

	float3 HalfVec = normalize(ViewVec - gPerFrameConstants.lightDir.xyz);
	NoV = saturate(NoV);

	float NoL = dot(normal, -gPerFrameConstants.lightDir.xyz);	

	// Deal with two faced materials
	NoL = (isTwoSided ? abs(NoL) : saturate(NoL));

	// calculate color contribution from specular lighting
	float3 F0 = f3(0.08); // 0.08 is the index of refraction
	float3 SpecularColor = lerp(F0, diffuseColor.rgb, Metallic);
	float3 DiffuseColor = lerp(diffuseColor.rgb, f3(0.0), Metallic);

	// Calculate Shadow Factor
	float4 posLS = mul(gVBViewConstants.transform[VIEW_SHADOW].vp, float4(position, 1.0f));
	float shadowFactor = calcESMShadowFactor(posLS, gShadowMap, gSamplerTrilinearClamp, gPerFrameConstants.esmControl);

	// Calculate Sun Illumation
	float3 shadedColor = PBR_shadowFactor(
					NoL, NoV, 
					ViewVec, HalfVec, normal, 
					DiffuseColor, SpecularColor, Roughness, Metallic, shadowFactor);
	shadedColor *= gPerFrameConstants.lightColor.rgb * gPerFrameConstants.lightColor.a * NoL * shadowFactor;

	if (gPerFrameConstants.visualizeAo > 0)
		shadedColor = f3(ao);
	
	// point lights
	// Find the light cluster for the current pixel
	uint2 clusterCoords = uint2(floor((In.screenPos * 0.5f + 0.5f) * float2(LIGHT_CLUSTER_WIDTH, LIGHT_CLUSTER_HEIGHT)));
	uint numLightsInCluster = LoadByte(gLightClustersCount, LIGHT_CLUSTER_COUNT_POS(clusterCoords.x, clusterCoords.y) << 2);

	// Accumulate light contributions
	for (uint j = 0; j < numLightsInCluster; ++j)
	{
        uint lightId = LoadByte(gLightClusters, LIGHT_CLUSTER_DATA_POS(j, clusterCoords.x, clusterCoords.y) << 2);
        shadedColor += calcPointLightShade(
						NoV, 
						ViewVec, normal,
						DiffuseColor, SpecularColor, Roughness, Metallic,
						position, gLights[lightId].position.xyz, gLights[lightId].color.xyz, LIGHT_SIZE,
						isTwoSided);
	}

	float ambientIntencity = 0.05f * ao;
	float3 ambient = diffuseColor.rgb * ambientIntencity;

	float3 FinalColor = shadedColor + ambient;

#if defined(_DEBUG)
    FinalColor = debugVisualize(
		FinalColor, int2(In.position.xy), triangleIndex, texCoord, derivativesOut.m_lambda, NoV, 0.5 * log(dot(texCoordDX, texCoordDX) + dot(texCoordDY, texCoordDY)),
		binCoord, triangleCount, binOccupancy, BIN_SIZE,
		bool(gPerFrameConstants.visualizeGeometry), bool(gPerFrameConstants.visualizeBinTriangleCount), bool(gPerFrameConstants.visualizeBinOccupancy)
	);
#endif

	RETURN(float4(FinalColor, 1.0));
}
