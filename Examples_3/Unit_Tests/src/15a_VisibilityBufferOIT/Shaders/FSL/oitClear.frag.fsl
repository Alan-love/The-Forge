/*
* Copyright (c) 2017-2025 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#ifndef USE_VRS
    #define USE_VRS 0
#endif

#include "shader_defs.h.fsl"
#include "vrs_resources.h.fsl"
#include "vb_resources.h.fsl"
#include "visibilityBuffer_pass_transparent.srt.h"

STRUCT(PsIn)
{
    DATA(float4, position, SV_Position);
    DATA(float2, texCoord, TEXCOORD);
};
ROOT_SIGNATURE(DefaultRootSignature)
void PS_MAIN( PsIn In, SV_SampleIndex(uint) i)
{
	INIT_MAIN;
	
	gGeometryCountBuffer[0] = 0;

	uint windowWidth = uint(gPerFrameConstants.cullingViewports[VIEW_CAMERA].windowSize.x);
	uint windowHeight = uint(gPerFrameConstants.cullingViewports[VIEW_CAMERA].windowSize.y);

	uint data = OIT_HEAD_INVALID;
	uint2 pixelAddr = uint2(In.position.xy);

	if (pixelAddr.x < windowWidth && pixelAddr.y < windowHeight)
	{
		uint bufferIdx = pixelAddr.y * windowWidth + pixelAddr.x;
		gHeadIndexBufferUAV[bufferIdx] = data;
	}

	clip(-1.0f);
	RETURN();
}
