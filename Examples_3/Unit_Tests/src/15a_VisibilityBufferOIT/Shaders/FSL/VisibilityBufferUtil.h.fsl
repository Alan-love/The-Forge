/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

float4 LoadVertex(uint index) 
{
    return float4(asfloat(LoadByte4(gVertexPositionBuffer, index * 12)).xyz, 1);
}

float2 LoadTexCoord(uint index) 
{
    return unpack2Floats(LoadByte(gVertexTexCoordBuffer, index << 2));
}

float4x4 GetModelViewProj(uint geomSet, uint view, inout(uint) vertID)
{
    uint     indirectData = gIndirectDataBuffer[vertID];
    MeshData meshConstant = gMeshDataBuffer[indirectData];
    vertID = vertID - meshConstant.indirectVertexOffset;

    return mul(gPerFrameConstants.transform[view].mvp.mat, meshConstant.modelMtx);
}

float4x4 GetModelViewProjAndMaterialID(uint geomSet, uint view, inout(uint) vertID, out(uint) materialID)
{
    uint     indirectData = gIndirectDataBuffer[vertID];
    MeshData meshConstant = gMeshDataBuffer[indirectData];
    vertID = vertID - meshConstant.indirectVertexOffset;
    materialID = ((meshConstant.materialID_flags >> MATERIAL_ID_LOW_BIT) & MATERIAL_ID_MASK);

    return mul(gPerFrameConstants.transform[view].mvp.mat, meshConstant.modelMtx);
}

