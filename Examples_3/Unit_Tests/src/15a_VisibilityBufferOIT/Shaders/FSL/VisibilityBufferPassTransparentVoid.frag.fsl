/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#define NO_MATERIALID_ON_PIXEL_SHADER_INPUT
#include "ShaderDefs.h.fsl"
#include "VisibilityBufferResources.h.fsl"
#include "VisibilityBufferPassTransparent.srt.h"
#include "VisibilityBufferUtil.h.fsl"

ROOT_SIGNATURE(DefaultRootSignature)
void PS_MAIN( PsInAlphaTested In, SV_PrimitiveID(uint) primitiveId)
{
	INIT_MAIN;

	uint2 screenSize = uint2(gPerFrameConstants.cullingViewports[VIEW_CAMERA].windowSize);

	uint nodeIdx = 0; 
	uint2 screenPos = uint2(In.position.xy);

	if (screenPos.x < screenSize.x && screenPos.y < screenSize.y)
	{
		AtomicAdd(gGeometryCountBuffer[0], 1, nodeIdx);

		const uint maxNodeCount = OIT_MAX_FRAG_COUNT * screenSize.x * screenSize.y;
		if (nodeIdx < maxNodeCount)
		{
			uint prevHeadIdx = OIT_HEAD_INVALID;
			uint bufferIdx = screenPos.y * screenSize.x + screenPos.x; 
			AtomicExchange(gHeadIndexBufferUAV[bufferIdx], nodeIdx, prevHeadIdx);

			gVBDepthLinkedListUAV[nodeIdx].triangleData = PACK_VB_DATA(GEOMSET_ALPHA_BLEND, primitiveId);
			gVBDepthLinkedListUAV[nodeIdx].next = prevHeadIdx;
		}
	}

	clip(-1.0f);
}
