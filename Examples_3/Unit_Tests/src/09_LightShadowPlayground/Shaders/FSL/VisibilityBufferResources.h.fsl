/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef vb_resources_h
#define vb_resources_h
#include "SDFConstants.h.fsl"
#include "ShaderDefs.h.fsl"

#ifdef __cplusplus

#define FLAT(X) X

#else
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

#define DEBUG_OUTPUT_MODE_NONE 0
#define DEBUG_OUTPUT_MODE_EDGE_MASK 1
#define DEBUG_OUTPUT_MODE_THREAD_INDEX 2
#define DEBUG_OUTPUT_MODE_WAVE_INDEX 3
#endif

#define MAX_TEXTURE_UNITS 256U
#define QUADS_ARRAY_REGS 192

#define MAX_BLUR_KERNEL_SIZE 16

#define WAVE_SIZE 64
#define SS_SAMPLE_COUNT 60
#define HARD_SHADOW_SAMPLES 4
#define FADE_OUT_SAMPLES 8
#define SHADOW_MAX_VALUE 0xFFFF

#ifndef SAMPLE_COUNT
#define SAMPLE_COUNT 4
#endif

#define READ_COUNT (SS_SAMPLE_COUNT / WAVE_SIZE + 2)



#define NEAR_DEPTH_VALUE 1.0f
#define FAR_DEPTH_VALUE 0.0

#if defined(METAL)
#define TEXTURE_ATOMIC_SUPPORTED 0
#else
#define TEXTURE_ATOMIC_SUPPORTED 1
#endif





STRUCT(ObjectUniform)
{
    DATA(float4x4, worldViewProjMat, None);
    DATA(uint, viewID, None);
};



STRUCT(PsInOpaque)
{
	DATA(float4, position,     SV_Position);
};

STRUCT(PsInAlphaTested)
{
	DATA(float4, position,     SV_Position);
	DATA(float2, texCoord,     TEXCOORD0);
	DATA(FLAT(uint), materialID, TEXCOORD1);
};

STRUCT(MeshSDFUniformBlock)
{
	DATA(float4x4, mWorldToVolumeMat[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mUVScaleAndVolumeScale[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mLocalPositionExtent[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mUVAddAndSelfShadowBias[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mSDFMAD[SDF_MAX_OBJECT_COUNT], None);
	DATA(uint4, mNumObjects, None);
};

STRUCT(VSMInputConstantData)
{
	DATA(float2, mBleedingReduction, None);
	DATA(float, mMinVariance, None);
	DATA(float, mPad, None);
};

STRUCT(MSMInputConstantData)
{
	DATA(float2, padding, None);
	DATA(float, mRoundingErrorCorrection, None);
	DATA(float, mBleedingReductionMultiplier, None);
};

STRUCT(LightUniformBlock)
{
	DATA(float4x4, mLightViewProj, None);
	DATA(float4, lightPosition, None);
	DATA(float4, lightColor, None);
	DATA(float4, mLightUpVec, None);
	DATA(float4, mTanLightAngleAndThresholdValue, None);
	DATA(float4, mLightDir, None);
};

STRUCT(CameraUniformBlock)
{
    DATA(float4x4, View, None);
    DATA(float4x4, Project, None);
    DATA(float4x4, ViewProject, None);
    DATA(float4x4, InvView, None);
	DATA(float4x4, InvProj, None);
	DATA(float4x4, InvViewProject, None);
	DATA(float4x4, SkyProjView, None);
	DATA(float4, mCameraPos, None);
	DATA(float, mNear, None);
	DATA(float, mFar, None);
	DATA(float, mFarNearDiff, None);
	DATA(float, mFarNear, None);
	DATA(float2, mTwoOverRes, None);
	DATA(float2, mWindowSize, None);
	DATA(float4, mDeviceZToWorldZ, None);

	DATA(VSMInputConstantData, mVSM, None);
	DATA(MSMInputConstantData, mMSM, None);
	DATA(LightUniformBlock, mLight, None);

	DATA(int, ShadowType, None);
	DATA(uint, mSSSEnabled, None);
	DATA(float, mEsmControl, None);
};


STRUCT(PackedAtlasQuads)
{
	DATA(float4, mQuadsData[QUADS_ARRAY_REGS], None);
};

STRUCT(AtlasQuads)
{
	DATA(float4, mPosData, None);
	DATA(float4, mMiscData, None);
	DATA(float4, mTexCoordData, None);
};


STRUCT(MeshSDFPushConstant)
{
	DATA(uint, mNumObjects, None);
};

STRUCT(ASMUniform)
{
	DATA(float4x4, mIndexTexMat, None);
	DATA(float4x4, mPrerenderIndexTexMat, None);
	DATA(float4,   mSearchVector, None);
	DATA(float4,   mPrerenderSearchVector, None);
	DATA(float4,   mWarpVector, None);
	DATA(float4,   mPrerenderWarpVector, None);
	DATA(float4,   mMiscBool, None);
};

STRUCT(UpdateSDFVolumeTextureAtlas)
{
	DATA(uint4, mSourceAtlasVolumeMinCoord, None);
	DATA(uint4, mSourceDimensionSize, None);
	DATA(uint4, mSourceAtlasVolumeMaxCoord, None);
};

STRUCT(ASMFrustumDesc)
{
	DATA(float3, mIndexCoord, None);
	DATA(int, mStartingMip, None);
};

STRUCT(SSSUniformData)
{
	DATA(float4, mLightCoordinate, None);
	DATA(float4, mScreenSize, None);
	DATA(float, mSurfaceThickness, None);
	DATA(float, mBilinearThreshold, None);
	DATA(float, mShadowContrast, None);
	DATA(uint, mIgnoreEdgePixels, None);
	DATA(uint, mBilinearSamplingOffsetMode, None);
	DATA(uint, mDebugOutput, None);
};

STRUCT(ScreenSpaceShadowsUniforms)
{
	DATA(int2, WaveOffset, None);
};


STRUCT(BlurWeightData)
{
	DATA(float4, mBlurWeights[MAX_BLUR_KERNEL_SIZE/4], None);
};

STRUCT(GaussianBlurConfig)
{
	DATA(uint, mBlurPassType, None);
	DATA(uint, mFilterRadius, None);
};

STRUCT(RootConstant)
{
	DATA(uint, drawId, None);
};

STRUCT(MeshConstants)
{
	DATA(uint, indexOffset, None);
	DATA(uint, vertexOffset, None);
	DATA(uint, materialID, None);
	DATA(uint, twoSided, None); //0 or 1
};

#endif /* vb_resources_h */
