/*
* Copyright (c) 2017-2025 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#define THREAD_GROUP_SIZE 64

#include "resources.comp.h.fsl"
#include "resources.h.fsl"
#include "hair.srt.h"

float3 RotateVec(float4 q, float3 v)
{
	float3 uv, uuv;
	float3 qvec = float3(q.x, q.y, q.z);
	uv = cross(qvec, v);
	uuv = cross(qvec, uv);
	uv *= (2.0f * q.w);
	uuv *= 2.0f;

	return v + uv + uuv;
}

float4 InverseQuaternion(float4 q)
{
	float lengthSqr = q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w;

	if (lengthSqr < 0.001)
		return float4(0, 0, 0, 1.0f);

	q.x = -q.x / lengthSqr;
	q.y = -q.y / lengthSqr;
	q.z = -q.z / lengthSqr;
	q.w = q.w / lengthSqr;

	return q;
}

float4 NormalizeQuaternion(float4 q)
{
	float4 qq = q;
	float n = q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w;

	if (n < 1e-10f)
	{
		qq.w = 1;
		return qq;
	}

	qq *= 1.0f / sqrt(n);
	return qq;
}

float4 MultQuaternionAndQuaternion(float4 qA, float4 qB)
{
	float4 q;

	q.w = qA.w * qB.w - qA.x * qB.x - qA.y * qB.y - qA.z * qB.z;
	q.x = qA.w * qB.x + qA.x * qB.w + qA.y * qB.z - qA.z * qB.y;
	q.y = qA.w * qB.y + qA.y * qB.w + qA.z * qB.x - qA.x * qB.z;
	q.z = qA.w * qB.z + qA.z * qB.w + qA.x * qB.y - qA.y * qB.x;

	return q;
}

float4 MakeQuaternion(float angle_radian, float3 axis)
{
	// create quaternion using angle and rotation axis
	float4 quaternion;
	float halfAngle = 0.5f * angle_radian;
	float sinHalf = sin(halfAngle);

	quaternion.w = cos(halfAngle);
	quaternion.xyz = sinHalf * axis.xyz;

	return quaternion;
}

float4 QuatFromUnitVectors(float3 u, float3 v)
{
	float r = 1.f + dot(u, v);
	float3 n;

	// if u and v are parallel
	if (r < 1e-7)
	{
		r = 0.0f;
		n = abs(u.x) > abs(u.z) ? float3(-u.y, u.x, 0.f) : float3(0.f, -u.z, u.y);
	}
	else
	{
		n = cross(u, v);
	}

	float4 q = float4(n.x, n.y, n.z, r);
	return NormalizeQuaternion(q);
}


VertexIndices CalculateVertexIndices(uint localID, uint groupID)
{
	VertexIndices result;

	result.indexSharedMem = localID;

	result.localStrandIndex = localID % gHairSimulation.NumStrandsPerThreadGroup;
	result.globalStrandIndex = groupID * gHairSimulation.NumStrandsPerThreadGroup + result.localStrandIndex;
	result.globalStrandIndex *= gHairSimulation.NumFollowHairsPerGuideHair + 1;
	result.localVertexIndex = (localID - result.localStrandIndex) / gHairSimulation.NumStrandsPerThreadGroup;

	result.globalVertexIndex = result.globalStrandIndex * gHairSimulation.NumVerticesPerStrand + result.localVertexIndex;

	return result;
}

StrandIndices CalculateStrandIndices(uint localID, uint groupID)
{
	StrandIndices result;
	result.globalStrandIndex = THREAD_GROUP_SIZE * groupID + localID;
	result.globalStrandIndex *= gHairSimulation.NumFollowHairsPerGuideHair + 1;
	result.globalRootVertexIndex = result.globalStrandIndex * gHairSimulation.NumVerticesPerStrand;
	return result;
}

float4 Integrate(float4 currentPosition, float4 prevPosition, float4 force, VertexIndices indices)
{
	float4 result = currentPosition;

	force.xyz += gHairGlobal.Gravity.xyz;
	result.xyz += (1.0f - gHairSimulation.Damping) * (currentPosition.xyz - prevPosition.xyz) + force.xyz * gHairGlobal.TimeStep * gHairGlobal.TimeStep;

	return result;
}

GroupShared(float4, sharedPos[THREAD_GROUP_SIZE]);
GroupShared(float4, sharedTangent[THREAD_GROUP_SIZE]);
GroupShared(float, sharedLength[THREAD_GROUP_SIZE]);