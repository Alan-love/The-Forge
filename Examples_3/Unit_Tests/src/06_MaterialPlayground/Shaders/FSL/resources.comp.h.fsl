/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


struct VertexIndices
{
	uint globalStrandIndex;
	uint localStrandIndex;
	uint globalVertexIndex;
	uint localVertexIndex;
	uint indexSharedMem;
};

struct StrandIndices
{
	uint globalStrandIndex;
	uint globalRootVertexIndex;
};

struct Capsule
{
	float4 center0AndRadius0;
	float4 center1AndRadius1;
};


STRUCT(Simulation)
{
	DATA(float4x4, Transform, None);
	DATA(float4, QuatRotation, None);
#if HAIR_MAX_CAPSULE_COUNT > 0
	DATA(Capsule, Capsules[HAIR_MAX_CAPSULE_COUNT], None);
	DATA(uint, mCapsuleCount, None);
#endif
	DATA(float, Scale, None);
	DATA(uint, NumStrandsPerThreadGroup, None);
	DATA(uint, NumFollowHairsPerGuideHair, None);
	DATA(uint, NumVerticesPerStrand, None);
	DATA(float, Damping, None);
	DATA(float, GlobalConstraintStiffness, None);
	DATA(float, GlobalConstraintRange, None);
	DATA(float, VSPStrength, None);
	DATA(float, VSPAccelerationThreshold, None);
	DATA(float, LocalStiffness, None);
	DATA(uint, LocalConstraintIterations, None);
	DATA(uint, LengthConstraintIterations, None);
	DATA(float, TipSeperationFactor, None);
};



STRUCT(SpecularConfig)
{
	DATA(uint, pcMipSize, None);
	DATA(float, pcRoughness, None);
};

