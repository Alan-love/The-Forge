/*
* Copyright (c) 2017-2025 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/VisibilityBufferShadingUtilities.h.fsl"
#include "VisibiltyBufferResources.h.fsl"
#include "Global.srt.h"


STRUCT(PsIn)
{
	DATA(float4, Position,  SV_Position);
	DATA(float2, ScreenPos, TEXCOORD0);
};

STRUCT(PsOut)
{
	DATA(float4, Color,           SV_Target0);
	DATA(float4, NormalRoughness, SV_Target1);
};

ROOT_SIGNATURE(DefaultRootSignature)
PsOut PS_MAIN( PsIn In )
{
	INIT_MAIN;
	PsOut Out;

	float4 visRaw = LoadTex2D(gVBPassTexture, gSamplerBilinearClamp, uint2(In.Position.xy), 0);

	uint geomSetPrimID = packUnorm4x8(visRaw);

	// Early exit if this pixel doesn't contain triangle data
	if (geomSetPrimID == ~0u)
	{
		discard;
	}

	// Extract packed data
	uint primitiveID = (geomSetPrimID >> PRIM_ID_LOW_BIT) & PRIM_ID_MASK;
	uint geomSet = (geomSetPrimID >> GEOM_LOW_BIT) & GEOM_MASK;

	uint triIdx0 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 0);
	uint triIdx1 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 1);
	uint triIdx2 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 2);

	uint index0 = LoadByte(gFilteredIndexBuffer, triIdx0 << 2);
	uint index1 = LoadByte(gFilteredIndexBuffer, triIdx1 << 2);
	uint index2 = LoadByte(gFilteredIndexBuffer, triIdx2 << 2);

	float3 v0pos = asfloat(LoadByte4(gVertexPositionBuffer, index0 * 12)).xyz;
	float3 v1pos = asfloat(LoadByte4(gVertexPositionBuffer, index1 * 12)).xyz;
	float3 v2pos = asfloat(LoadByte4(gVertexPositionBuffer, index2 * 12)).xyz;

	float4 pos0 = mul(gObjectUniformBlockPerFrame.worldViewProjMat, float4(v0pos, 1));
	float4 pos1 = mul(gObjectUniformBlockPerFrame.worldViewProjMat, float4(v1pos, 1));
	float4 pos2 = mul(gObjectUniformBlockPerFrame.worldViewProjMat, float4(v2pos, 1));

	float4 wPos0 = mul(gCBExtendCamera.InvViewProjMat,pos0);
	float4 wPos1 = mul(gCBExtendCamera.InvViewProjMat,pos1);
	float4 wPos2 = mul(gCBExtendCamera.InvViewProjMat,pos2);

	float2 two_over_windowsize = float2(1.5f, 1.5f) / gCBExtendCamera.viewPortSize.xy;

	//Compute partial derivatives. This is necessary to interpolate triangle attributes per pixel.
	BarycentricDeriv derivativesOut = CalcFullBary(pos0,pos1,pos2,In.ScreenPos,two_over_windowsize);
	
	//interpoalte the 1/w (oneOverW) for all 3 vertices of the triangle
	//using the barycentric coordinates and the delta vector
	float interpolatedW = dot(float3(pos0.w, pos1.w, pos2.w),derivativesOut.m_lambda);

	//reconstruct the z value at this screen point
	float zVal = interpolatedW * getElem(gCBExtendCamera.projMat, 2, 2) + getElem(gCBExtendCamera.projMat, 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using Screen Position and the Z value
	// Then by multiplying the perspective projected coordinates by the inverse view projection matrix, it produces world coord
	float3 WorldPos = mul(gCBExtendCamera.InvViewProjMat, float4(In.ScreenPos * interpolatedW, zVal, interpolatedW)).xyz;

	/////////////LOAD///////////////////////////////
	uint materialID = gIndirectDataBuffer[index0];

	//Texture coord interpolation
	f3x2 texCoords = make_f3x2_cols(
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index0 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index1 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index2 << 2)) 
	);

	// Interpolate texture coordinates and calculate the gradients for 
	// texture sampling with mipmapping support
	GradientInterpolationResults results = Interpolate2DWithDeriv(derivativesOut,texCoords);
	
	float2 texCoordDX = results.dx;
	float2 texCoordDY = results.dy;
	float2 texCoord = results.interp;

	//Calculate pixel color using interpolated attributes
	//reconstruct normal map Z from X and Y

	float4 normalMapData = f4(0);
	float4 diffuseColor  = f4(0);
	float4 specularColor = f4(0);
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		normalMapData = SampleGradTex2D(gNormalMaps[materialID],   gDefaultSampler, texCoord, texCoordDX, texCoordDY);
		diffuseColor  = SampleGradTex2D(gDiffuseMaps[materialID],  gDefaultSampler, texCoord, texCoordDX, texCoordDY);
		specularColor = SampleGradTex2D(gSpecularMaps[materialID], gDefaultSampler, texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	// reconstruct encoded normals...
	float3 reconstructedNormalMap;
	reconstructedNormalMap.xy = normalMapData.ga * 2.f - 1.f;
	reconstructedNormalMap.z = sqrt(saturate(1.f - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy)));

	//Normal interpolation
	float3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index0 << 2))) ,
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index1 << 2))) ,
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index2 << 2))) 
	);
	float3 normal = normalize(InterpolateWithDeriv_float3x3(derivativesOut, normals));;
	
	//Calculate pixel normal and tangent vectors
	f3x3 wPositions = make_f3x3_cols(
			wPos0.xyz,
			wPos1.xyz,
			wPos2.xyz
	);

	DerivativesOutput wPosDer = Cal3DDeriv(derivativesOut, wPositions);
	DerivativesOutput uvDer = { float3(results.dx, 0.0),  float3(results.dy, 0.0) };
	normal = perturb_normal(reconstructedNormalMap, normal, wPosDer, uvDer);

	float Roughness = clamp(specularColor.a, 0.05f, 0.99f);
	float Metallic = specularColor.b;

	// a hack to make the San Miguel floor reflective
	if(materialID == 203)
	{
		Roughness = gCBExtendCamera.mGroundRoughness;
		Metallic = gCBExtendCamera.mGroundMetallic;
	}

	float3 camPos = gCBExtendCamera.cameraWorldPos.xyz;

	float3 V = normalize(camPos.xyz - WorldPos.xyz);
	float NoV = dot(normal, V);

	bool isTwoSided = (geomSet == GEOMSET_ALPHA_CUTOUT) && (gMeshConstantsBuffer[materialID].twoSided == 1);
	if(isTwoSided && NoV < 0.0)
	{
		//flip normal
		normal = -normal;
		NoV = dot(normal, V);
	}

	float3 Lo = f3(0.0f);
	NoV = saturate(NoV);
	float3 R = reflect(-V, normal);
	
	// calculate color contribution from specular lighting
	float3 F0 = f3(0.08); // 0.08 is the index of refraction
	float3 SpecularColor = lerp(F0, diffuseColor.rgb, Metallic);
	float3 DiffuseColor = lerp(diffuseColor.rgb, f3(0.0), Metallic);

	//Directional Lights
	for(int i = 0; i < gCBDLights.currAmountOfDLights; ++i)
	{
		// Vec from world pos to light pos
		float3 L = -normalize(gCBDLights.dlights[i].mDir.xyz);

		// halfway vec
		float3 H = normalize(V + L);

		float3 radiance = gCBDLights.dlights[i].mCol.rgb * gCBDLights.dlights[i].mCol.a;

		float NoL = dot(normal, L);	
		// Deal with two faced materials
		NoL = (isTwoSided ? abs(NoL) : saturate(NoL));

		float3 shadedColor = PBR(
					NoL, NoV, 
					V, H, normal, 
					DiffuseColor, SpecularColor, Roughness, Metallic);

		Lo += shadedColor * radiance * NoL;
	}

	//Point Lights
	for(int pl_i = 0; pl_i < gCBLights.currAmountOflights; ++pl_i)
	{
		float3 shadedColor = calcPointLightShade(
						NoV, 
						V, normal,
						DiffuseColor, SpecularColor, Roughness, Metallic,
						WorldPos, gCBLights.lights[pl_i].pos.xyz, gCBLights.lights[pl_i].col.rgb, gCBLights.lights[pl_i].radius, isTwoSided);
		Lo += shadedColor * gCBLights.lights[pl_i].intensity;
	}

	float3 F = FresnelSchlickRoughness(NoV, F0, Roughness);
	float3 kS = F;
	float3 kD = f3(1.0f) - kS;
	kD *= 1.0f - Metallic;

	bool useEnvMap = gCBExtendCamera.mUseEnvMap != 0;

	float3 irradiance = SampleTexCube(gIrradianceMap, gEnvSampler, normal).rgb;
	float3 diffuse = irradiance * DiffuseColor;
	float3 specColor = useEnvMap ? SampleLvlTexCube(gSpecularMap, gEnvSampler, R, Roughness * 4).rgb : gCBExtendCamera.mEnvColor.rgb;
	float2 brdf = SampleTex2D(gBRDFIntegrationMap, gBilinearSampler, float2(NoV, Roughness)).rg;
	float3 specular = specColor * (SpecularColor * brdf.x + brdf.y);

	float ao = 1.0f;
	float3 ambient = (kD * diffuse + specular) * ao;
	float3 color = Lo + ambient;

	Out.Color = float4(color.rgb, 1.0f);
	Out.NormalRoughness = float4(normal.xyz, Roughness);
	RETURN(Out);
}
