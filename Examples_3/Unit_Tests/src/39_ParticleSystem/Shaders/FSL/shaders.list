#include "../../../../../../Common_3/Graphics/FSL/defaults.h"

#rootsig default.rootsig
#end

#rootsig compute.rootsig
#end

#vert particle.vert
#include "particle.vert.fsl"
#end

#frag particle.frag

#if defined(ORBIS)
#define MAX_TRANSPARENCY_LAYERS	20
#else
#define MAX_TRANSPARENCY_LAYERS	24
#endif

#include "particle.frag.fsl"
#end


#frag particle_hq.frag

#if defined(ORBIS)
#define MAX_TRANSPARENCY_LAYERS	20
#elif defined(PROSPERO) || defined(WINDOWS)
#define MAX_TRANSPARENCY_LAYERS 64
#else
#define MAX_TRANSPARENCY_LAYERS	24
#endif

#include "particle.frag.fsl"
#end

#comp particle_simulate.comp

#if defined(ORBIS)
#define MAX_TRANSPARENCY_LAYERS	20
#else
#define MAX_TRANSPARENCY_LAYERS	24
#endif
#include "particle_simulate.comp.fsl"
#end


#comp particle_simulate_hq.comp
#if defined(ORBIS)
#define MAX_TRANSPARENCY_LAYERS	20
#elif defined(PROSPERO) || defined(WINDOWS)
#define MAX_TRANSPARENCY_LAYERS 64
#else
#define MAX_TRANSPARENCY_LAYERS	24
#endif
#define DETERMINISTIC_SIMULATION
#include "particle_simulate.comp.fsl"
#end


#vert shadow_pass.vert
#include "shadow_pass.vert.fsl"
#end

#frag shadow_pass.frag
#include "shadow_pass.frag.fsl"
#end

#vert shadow_pass_alpha.vert
#include "shadow_pass_alpha.vert.fsl"
#end

#frag shadow_pass_alpha.frag
#include "shadow_pass_alpha.frag.fsl"
#end

#comp shadow_filtering.comp
#include "shadow_filtering.comp.fsl"
#end

#vert FT_PRIM_ID visibilityBuffer_pass.vert
#include "visibilityBuffer_pass.vert.fsl"
#end

#frag FT_PRIM_ID visibilityBuffer_pass.frag
#include "visibilityBuffer_pass.frag.fsl"
#end

#vert FT_PRIM_ID visibilityBuffer_pass_alpha.vert
#include "visibilityBuffer_pass_alpha.vert.fsl"
#end

#frag FT_PRIM_ID visibilityBuffer_pass_alpha.frag
#include "visibilityBuffer_pass_alpha.frag.fsl"
#end

#comp triangle_filtering.comp
#include "triangle_filtering.comp.fsl"
#end

#comp clear_buffers.comp
#include "clear_buffers.comp.fsl"
#end

#comp clear_light_clusters.comp
#include "clear_light_clusters.comp.fsl"
#end

#comp clear_light_clusters_relaxed.comp
#define USE_RELAXED_LOCAL_GROUP 1
#include "clear_light_clusters.comp.fsl"
#end

#comp cluster_lights.comp
#include "cluster_lights.comp.fsl"
#end

#comp cluster_lights_relaxed.comp
#define USE_RELAXED_LOCAL_GROUP 1
#include "cluster_lights.comp.fsl"
#end

#comp compute_depth_bounds.comp
#include "compute_depth_bounds.comp.fsl"
#end

#comp compute_depth_bounds_relaxed.comp
#define USE_RELAXED_LOCAL_GROUP 1
#include "compute_depth_bounds.comp.fsl"
#end

#comp compute_depth_clusters.comp
#include "compute_depth_clusters.comp.fsl"
#end

#comp compute_depth_clusters_relaxed.comp
#define USE_RELAXED_LOCAL_GROUP 1
#include "compute_depth_clusters.comp.fsl"
#end

#comp clear_texture.comp
#include "clear_texture.comp.fsl"
#end

#vert visibilityBuffer_shade.vert
#include "visibilityBuffer_shade.vert.fsl"
#end

// We should have a better way of generating these
#frag visibilityBuffer_shade_SAMPLE_1.frag
#define SAMPLE_COUNT 1
#include "visibilityBuffer_shade.frag.fsl"
#end

#frag visibilityBuffer_shade_SAMPLE_1_relaxed.frag
#define SAMPLE_COUNT 1
#define USE_RELAXED_LOCAL_GROUP 1
#include "visibilityBuffer_shade.frag.fsl"
#end

#vert fsq.vert
#include "fsq.vert.fsl"
#end

#frag fsq.frag

#if defined(ORBIS)
#define MAX_TRANSPARENCY_LAYERS	20
#else
#define MAX_TRANSPARENCY_LAYERS	24
#endif

#include "fsq.frag.fsl"
#end


#frag fsq_hq.frag

#if defined(ORBIS)
#define MAX_TRANSPARENCY_LAYERS	20
#elif defined(PROSPERO) || defined(WINDOWS)
#define MAX_TRANSPARENCY_LAYERS 64
#else
#define MAX_TRANSPARENCY_LAYERS	24
#endif

#include "fsq.frag.fsl"
#end


#frag downsample_depth.frag
#include "downsample_depth.frag.fsl"
#end
