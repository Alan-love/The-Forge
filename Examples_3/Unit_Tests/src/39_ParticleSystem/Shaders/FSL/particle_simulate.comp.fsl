/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_shared.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_sets.h.fsl"
#include "shader_defs.h.fsl"
#include "vb_resources.h.fsl"
#include "particle.srt.h"
#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_boids.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_random.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_utils.h.fsl"


STATIC const float2 quadUVs[QUAD_VERTEX_COUNT] = 
{
	float2(0.0f, 0.0f),
	float2(1.0f, 0.0f),
	float2(1.0f, 1.0f),
	float2(0.0f, 1.0f)
};

INLINE bool IsPointInTriangle(float2 p, float2 a, float2 b, float2 c, inout(float2) baryCoords)
{
	float u = ((b.y - c.y)*(p.x - c.x) + (c.x - b.x)*(p.y - c.y)) / ((b.y - c.y)*(a.x - c.x) + (c.x - b.x)*(a.y - c.y));
	float v = ((c.y - a.y)*(p.x - c.x) + (a.x - c.x)*(p.y - c.y)) / ((b.y - c.y)*(a.x - c.x) + (c.x - b.x)*(a.y - c.y));
	float w = 1 - u - v;

	if (0 <= u  && u <= 1 && 0 <= v && v <= 1 && 0 <= w && w <= 1)
	{
		baryCoords.x = u;
		baryCoords.y = v;
		return true;
	}

    return false;
}


// Current batch size is 32x1, each thread simulates and renders 1 particle
ROOT_SIGNATURE(ComputeRootSignature)
NUM_THREADS(PARTICLES_BATCH_X, PARTICLES_BATCH_Y, 1)
void CS_MAIN(SV_GroupThreadID(uint3) inGroupThreadId, SV_DispatchThreadID(uint3) inDispatchThreadId)
{
	INIT_MAIN;

	uint threadCount = uint(ceil(sqrt(float(MAX_PARTICLES_COUNT) / (PARTICLES_BATCH_X * PARTICLES_BATCH_Y))));
	uint particleIdx = inDispatchThreadId.y * threadCount * PARTICLES_BATCH_X + inDispatchThreadId.x;
	uint groupIdx = inGroupThreadId.x + inGroupThreadId.y * PARTICLES_BATCH_X;

	if (particleIdx == 0)
	{
		gParticleRenderIndirectDataRW[0] = 6;
		gParticleRenderIndirectDataRW[1] = 0;
		gParticleRenderIndirectDataRW[2] = 0;
		gParticleRenderIndirectDataRW[3] = 0;
#ifdef _DEBUG
		gParticleStatsBufferRW[0].VisibleParticlesCount = 0;
		gParticleStatsBufferRW[0].VisibleLightsCount = 0;
#endif
	}

	GroupMemoryBarrier();

	if (particleIdx >= MAX_PARTICLES_COUNT)
	{
		RETURN();
	}


	uint rngSeed = gParticleConstantBuffer.Seed * particleIdx;

	uint particleCount;
	uint particleBufferOffset;

#ifdef _DEBUG
	// Find the section where we are for debug purposes
	uint currBufferSection = GetCurrentBufferSection(particleIdx);
#endif


	uint Bitfield = gBitfieldBufferRW[particleIdx];
	uint setIndex = Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK;
	if (Bitfield == 0)
	{
		RETURN();
	}

	if (particleIdx - gParticleSetsBuffer[setIndex].StartIdx > ceil(gParticleSetsBuffer[setIndex].ParticlesPerSecond * gParticleSetsBuffer[setIndex].InitialAge))
	{
		gBitfieldBufferRW[particleIdx] = 0;
		RETURN();
	}

	// Initialize particle if it has just been uploaded
	if ((Bitfield & PARTICLE_BITFIELD_REQUIRES_INIT) > 0)
	{
		Bitfield &= ~PARTICLE_BITFIELD_REQUIRES_INIT;
		Bitfield |= PARTICLE_BITFIELD_LIGHT_CULLED | PARTICLE_BITFIELD_IS_ALLOCATED | gParticleSetsBuffer[setIndex].ParticleSetBitfield;
	
		float Age = (float(particleIdx - gParticleSetsBuffer[setIndex].StartIdx) / -gParticleSetsBuffer[setIndex].ParticlesPerSecond);
		SaveParticle(gParticleSetsBuffer[setIndex], particleIdx, Bitfield, float3(0, 0, 0), Age, float3(0, 0, 0), 0);

#ifdef _DEBUG
		uint foo;
		AtomicAdd(gParticleStatsBufferRW[0].AllocatedCount[setIndex], 1, foo);
#endif
		RETURN();
	}

	if ((Bitfield & PARTICLE_BITFIELD_IS_ALLOCATED) == 0 || !IsParticleSetVisible(gParticleSetsBuffer[setIndex]))
	{
		RETURN();
	}

	ParticleData particleData = gParticlesDataBufferRW[particleIdx];
	float Age;

	// Particle set attributes
	const ParticleSet particleSet = gParticleSetsBuffer[setIndex];
	particleCount = uint(UnpackMaxParticles(particleSet));

	// Particle attributes
	float3 Position; 
	float4 velocityAge;

	UnpackParticle(particleSet, particleData, Position, velocityAge);
	Age = velocityAge.w;

	float2 steeringSpeed = unpack2Floats(particleSet.SteeringStrengthMinSpeed);
	float maxSpeed = unpack2Floats(particleSet.MaxSizeAndSpeed).y;
	float minSpeed = steeringSpeed.y;
	steeringSpeed.y = UnpackSpeed(particleSet, particleIdx);

	// Worst case simulate at 15 FPS
	float deltaTime = min(0.066, gParticleConstantBuffer.TimeDelta);
	Age += (Bitfield & PARTICLE_BITFIELD_IS_ALIVE) == 0 ? deltaTime : -deltaTime;

	if ((Bitfield & PARTICLE_BITFIELD_IS_ALIVE) == 0)
	{
		if (Age >= 0.0f)
		{
#ifdef _DEBUG
			uint foo;
			AtomicAdd(gParticleStatsBufferRW[0].AliveCount[currBufferSection], 1, foo);
#endif

			// Initialize particle.
			Age = particleSet.InitialAge - Age;

			switch (particleSet.ParticleSetBitfield & PARTICLE_BITFIELD_TYPE_BITS_MASK)
			{
				case PARTICLE_BITFIELD_TYPE_NONE:
					Position = particleSet.Position.xyz + randFloat3_negOneToPlusOne(rngSeed) * UnpackParticleSetSize(particleSet.SpawnVolume);
					velocityAge.xyz = normalize(randFloat3_negOneToPlusOne(rngSeed)) * steeringSpeed.y;
					break;

				case PARTICLE_BITFIELD_TYPE_BOIDS:
					velocityAge.xyz = randFloat3_negOneToPlusOne(rngSeed) * 0.01;
					Position = ((particleSet.AttractorIndex != -1 ? gParticleConstantBuffer.SeekPosition.xyz : particleSet.Position.xyz) + randFloat3_negOneToPlusOne(rngSeed) * 0.01);
					break;

				case PARTICLE_BITFIELD_TYPE_RAIN:
					Position = particleSet.Position.xyz + randFloat3_negOneToPlusOne(rngSeed) * UnpackParticleSetSize(particleSet.SpawnVolume);
					Bitfield |= PARTICLE_BITFIELD_IS_ACCELERATING | PARTICLE_BITFIELD_COLLIDE_WITH_DEPTH_BUFFER;
					velocityAge.xyz = float3(5.0f, -10.0f, 0.0f);
					break;
				default:
					break;
			}

			Bitfield |= PARTICLE_BITFIELD_IS_ALIVE;
			Bitfield &= ~PARTICLE_BITFIELD_HAS_COLLIDED;

			SaveParticle(particleSet, particleIdx, Bitfield, Position, Age, velocityAge.xyz, 0);
			RETURN();
		}
		else
		{
			SaveParticle(particleSet, particleIdx, Bitfield, Position, Age, velocityAge.xyz, 0);
			RETURN();
		}
	}
	else if (Age < 0)
	{
		// Kill particle
		Bitfield &= ~PARTICLE_BITFIELD_IS_ALIVE;
		// Light isn't visible anymore
		Bitfield |= PARTICLE_BITFIELD_LIGHT_CULLED;

		Age = 0;
#ifdef _DEBUG
		uint foo;
		AtomicAdd(gParticleStatsBufferRW[0].AliveCount[currBufferSection], -1, foo);
#endif

		SaveParticle(particleSet, particleIdx, Bitfield, Position, Age, velocityAge.xyz, 0);
		RETURN();
	}

	// Simulate particle
	// Add noise
	float2 LightRadiusNoiseIntensity = unpack2Floats(particleSet.LightRadiusAndVelocityNoise);
	LightRadiusNoiseIntensity.x *= UnpackFadeValue(Age / particleSet.InitialAge, particleSet.StartColor, particleSet.EndColor);
	velocityAge.xyz += randFloat3_negOneToPlusOne(rngSeed) * LightRadiusNoiseIntensity.y;
	Position += velocityAge.xyz * deltaTime;
	
	float4 vertexPos = float4(Position, 1.0f);
	float4 vertexClipSpace = mul(gParticleConstantBuffer.ViewProjTransform, float4(Position, 1.0f));
	float3 vertexNDC = vertexClipSpace.xyz / vertexClipSpace.w;
	float2 uv;

	if ((Bitfield & PARTICLE_BITFIELD_COLLIDE_WITH_DEPTH_BUFFER) > 0)
	{
		uv = vertexNDC.xy * 0.5 + 0.5;
		uv.y = 1.0 - uv.y;

		float particleDepth = linearizeDepthReverseZ(vertexNDC.z, gParticleConstantBuffer.CameraPlanes.x, gParticleConstantBuffer.CameraPlanes.y);
		float depth = linearizeDepthReverseZ(SampleLvlTex2D(gDepthBuffer, gSamplerPointClamp, uv, 0).r, gParticleConstantBuffer.CameraPlanes.x, gParticleConstantBuffer.CameraPlanes.y);
		
		// Particle collided
		if (particleDepth > depth && abs(particleDepth - depth) < PARTICLE_COLLISION_THRESHOLD && uv.x <= 1.0f && uv.x >= 0.0f && uv.y <= 1.0f && uv.y >= 0.0f)
		{
			Bitfield = (Bitfield & ~(PARTICLE_BITFIELD_IS_ACCELERATING
				| PARTICLE_BITFIELD_COLLIDE_WITH_DEPTH_BUFFER
				| PARTICLE_BITFIELD_BILLBOARD_MODE_BITS_MASK
			) | PARTICLE_BITFIELD_HAS_COLLIDED);

			Position -= deltaTime * velocityAge.xyz;
			velocityAge.xyz = float3(0,0,0);
		}
	}

	float animationTime = particleData.AnimationTime;
	if ((Bitfield & PARTICLE_BITFIELD_HAS_COLLIDED) > 0)
		animationTime += deltaTime * UnpackAnimationSpeed(particleSet);

	switch (particleSet.ParticleSetBitfield & PARTICLE_BITFIELD_TYPE_BITS_MASK)
	{
		case PARTICLE_BITFIELD_TYPE_NONE:
		{
			// Accelerate
			float4 acceleration = float4( unpack2Floats(particleSet.Acceleration.x), unpack2Floats(particleSet.Acceleration.y) );
			velocityAge.xyz += acceleration.xyz * deltaTime;
		}
		break;

		case PARTICLE_BITFIELD_TYPE_RAIN:
		{
			// Accelerate
			velocityAge.xyz += ((Bitfield & PARTICLE_BITFIELD_IS_ACCELERATING) > 0) ? float3(0.0f, -9.8f * deltaTime, 0.0f) : float3(0,0,0);
		}
		break;

		case PARTICLE_BITFIELD_TYPE_BOIDS:
		{
			float2 currForce = unpack2Floats(particleSet.BoidsSeparationFleeStrength);

			float3 particleSetSize = UnpackParticleSetSize(particleSet.SpawnVolume);
			float3 steering = float3(0,0,0);
			uint validAmount = 1;
			float3 avgPosition = Position, avgVelocity = velocityAge.xyz;

			const uint sampleCount = 8;
			UNROLL_N(sampleCount)
			for (uint i=0; i<sampleCount; i++)
			{
				float3 otherPos;
				float4 otherVel;
				UnpackParticle(particleSet, gParticlesDataBufferRW[particleIdx + int(i)-sampleCount/2], otherPos, otherVel);

#if defined(DETERMINISTIC_SIMULATION)
				if (int(i)-sampleCount/2 != 0)
					continue;
#else
				if (length(otherPos - Position) > PARTICLE_NEIGHBOR_THRESHOLD || i == groupIdx || length(otherPos) < 0.001)
					continue;
#endif
				steering += Separation(Position, otherPos, steeringSpeed.x) * currForce.x;
				avgPosition += otherPos;
				avgVelocity += otherVel.xyz;
				validAmount++;
			}
			
			// Add a small bias to avoid NaNs when normalizing
			float nanBias = 0.01;

			validAmount = max(validAmount, uint(1));
			
			avgPosition /= validAmount;
			avgVelocity /= validAmount;

			currForce = unpack2Floats(particleSet.BoidsAvoidSeekStrength);
			steering += Seek(Position, velocityAge.xyz, particleSet.AttractorIndex != -1 ? gParticleConstantBuffer.SeekPosition.xyz : particleSet.Position.xyz, steeringSpeed.y) * currForce.y;
			
			currForce = unpack2Floats(particleSet.BoidsCohesionAlignmentStrength);
#if defined(DETERMINISTIC_SIMULATION)
			currForce *= 0.5;
#endif
			steering += Cohesion(Position, avgPosition, steeringSpeed.x) * currForce.x;
			if (length(velocityAge.xyz - avgVelocity) > 0.01)
				steering += Alignment(velocityAge.xyz, avgVelocity, steeringSpeed.x) * currForce.y;

			if (dot(steering, steering) > steeringSpeed.x * steeringSpeed.x)
				steering = normalize(steering) * steeringSpeed.x;

			velocityAge.xyz += steering * 0.01;
		}
		break;
	}

	if (length(velocityAge.xyz) != 0 && dot(velocityAge.xyz, velocityAge.xyz) > steeringSpeed.y * steeringSpeed.y)
		velocityAge.xyz = normalize(velocityAge.xyz) * steeringSpeed.y;

	// Reset culling bit to 0
	Bitfield &= ~PARTICLE_BITFIELD_LIGHT_CULLED;

	float blinkFactor = UnpackLightModulationFactor(particleSet, gParticleConstantBuffer.Time, particleIdx);
	// Cull if firefly is off
	if ((Bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT) > 0 && blinkFactor <= 0.0)
	{
		Bitfield |= PARTICLE_BITFIELD_LIGHT_CULLED;
		SaveParticle(particleSet, particleIdx, Bitfield, Position, Age, velocityAge.xyz, animationTime);

		// If the light is not visible, than the particle isn't either
		RETURN();
	}

	// Cull lights
	if ((Bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT) > 0 && (Bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHTNSHADOW) == 0)
	{
		float fov = 2.0 * atan(1.0 / gParticleConstantBuffer.ProjTransform[1][1]);
		float lightRadiusNDC = 2.0 * LightRadiusNoiseIntensity.x * (1 / tan(fov * 0.5f)) / vertexClipSpace.w;
		float ratio = float(gParticleConstantBuffer.ScreenSize.x) / float(gParticleConstantBuffer.ScreenSize.y);

		lightRadiusNDC *= ratio;

		float clusterRadius = length(float2(1, 1));
		float distanceToCenter = length(vertexNDC.xy);

		if (distanceToCenter - clusterRadius >= abs(lightRadiusNDC) || vertexClipSpace.w < -abs(lightRadiusNDC))
		{
			Bitfield |= PARTICLE_BITFIELD_LIGHT_CULLED;
			SaveParticle(particleSet, particleIdx, Bitfield, Position, Age, velocityAge.xyz, animationTime);

			RETURN();
		}
	}

#ifdef _DEBUG
	if ((Bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT) > 0 && (Bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHTNSHADOW) == 0)
	{
		uint foo;
		AtomicAdd(gParticleStatsBufferRW[0].VisibleLightsCount, 1, foo);
	}
#endif

	SaveParticle(particleSet, particleIdx, Bitfield, Position, Age, velocityAge.xyz, animationTime);

	if (animationTime >= 1.0f)
	{
		RETURN();
	}

	/*********************************/
	// RASTERIZATION
	/*********************************/
	float scale = UnpackParticleSize(particleSet, particleIdx, 1.0 - (Age / particleSet.InitialAge));
	if ((Bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT) > 0)
		scale *= blinkFactor;
	if ((Bitfield & PARTICLE_BITFIELD_HAS_COLLIDED) > 0 && (Bitfield & PARTICLE_BITFIELD_TYPE_RAIN) > 0)
		scale *= 15.0f;

	float4 quadVertices[QUAD_VERTEX_COUNT] = {
		float4(-scale, -scale, 0.0f, 1.0f),
		float4(scale, -scale, 0.0f, 1.0f),
		float4(scale, scale, 0.0f, 1.0f),
		float4(-scale, scale, 0.0f, 1.0f),
	};

	vertexNDC = mul(gParticleConstantBuffer.ViewTransform, vertexPos).xyz;
	velocityAge.xyz = mul(gParticleConstantBuffer.ViewTransform, float4(velocityAge.xyz, 0.0)).xyz;

	UNROLL_N(QUAD_VERTEX_COUNT)
	for (uint i=0; i<QUAD_VERTEX_COUNT; i++)
	{
		if ((Bitfield & PARTICLE_BITFIELD_BILLBOARD_MODE_VELOCITY_ORIENTED) > 0)
		{
			float3 forward = float3(0.0f, 0.0f, 1.0f);
			const float3 up = normalize(velocityAge.xyz);
			const float3 right = cross(up, forward);
			forward = cross(up, right);

			float4x4 billboard = make_f4x4_cols(float4(right, 0), float4(up, 0), float4(forward, 0), float4(vertexPos.xyz, 1.0f));
			quadVertices[i] = mul(billboard, float4(quadVertices[i].xyz, 1.0));
			quadVertices[i] = mul(gParticleConstantBuffer.ViewProjTransform, quadVertices[i]);
		}
		else
		{
			quadVertices[i].xyz += dot(quadVertices[i].xyz, velocityAge.xyz) * velocityAge.xyz * particleSet.VelocityStretch;
			quadVertices[i].xyz += vertexNDC;

			// Projection
			quadVertices[i] = mul(gParticleConstantBuffer.ProjTransform, quadVertices[i]);
		}
	}

	// view space
	vertexPos = vertexClipSpace;

	// NDC but XY in [0, 1] range
	vertexPos /= vertexPos.w;
	vertexPos.xy *= 0.5f;
	vertexPos.y *= -1.0f;
	vertexPos.xy += float2(0.5f, 0.5f);

	float2 minMaxX;
	float2 minMaxY;
	
	UNROLL_N(QUAD_VERTEX_COUNT)
	for (uint i=0; i<QUAD_VERTEX_COUNT; i++)
	{
		quadVertices[i] /= quadVertices[i].w;
		quadVertices[i].xy *= 0.5f;
		quadVertices[i].y *= -1.0f;
		quadVertices[i].xy += float2(0.5f, 0.5f);

		if (i == 0)
		{
			minMaxX = float2(quadVertices[0].x, quadVertices[0].x);
			minMaxY = float2(quadVertices[0].y, quadVertices[0].y);
		}

		minMaxX.x = min(minMaxX.x, quadVertices[i].x);
		minMaxX.y = max(minMaxX.y, quadVertices[i].x);
		minMaxY.x = min(minMaxY.x, quadVertices[i].y);
		minMaxY.y = max(minMaxY.y, quadVertices[i].y);
	}

	// check if the particle is visible in the camera
	if (vertexPos.z < 0.0f || minMaxX.y < 0.0f || minMaxX.x > 1.0f || minMaxY.y < 0.0f || minMaxY.x > 1.0f)
	{
		RETURN();
	}

	vertexPos.xy *= float2(gParticleConstantBuffer.ScreenSize);
	UNROLL_N(QUAD_VERTEX_COUNT)
	for (uint i=0; i<QUAD_VERTEX_COUNT; i++)
		quadVertices[i].xy *= float2(gParticleConstantBuffer.ScreenSize);

	for (uint i=0; i<2; i++)
	{
		minMaxX[i] = clamp(minMaxX[i] * float(gParticleConstantBuffer.ScreenSize.x), 0.0f, float(gParticleConstantBuffer.ScreenSize.x) - 1);
		minMaxY[i] = clamp(minMaxY[i] * float(gParticleConstantBuffer.ScreenSize.y), 0.0f, float(gParticleConstantBuffer.ScreenSize.y) - 1);
	}

	// Leave particles that are too big to the hardware rasterizer
	if ((minMaxX.y - minMaxX.x) * (minMaxY.y - minMaxY.x) > PARTICLE_HW_RASTERIZATION_THRESHOLD)
	{
		uint hwRasterizerIdx;
		AtomicAdd(gParticleRenderIndirectDataRW[1], 1, hwRasterizerIdx);
		gParticlesToRasterizeRW[hwRasterizerIdx] = particleIdx;
		RETURN();
	}

	float speedOverMaxSpeed = maxSpeed == minSpeed ? 0.0 : (length(velocityAge.xyz) - minSpeed) / (maxSpeed - minSpeed);
	uint texIndex = (Bitfield & PARTICLE_BITFIELD_HAS_COLLIDED) > 0 ? UnpackSecondaryTextureIndex(particleSet) :
		UnpackPrimaryTextureIndex(particleSet);
	float2 tileOffset = float2(0,0);
	uint2 tileAmount = uint2(1,1);
	
	if ((Bitfield & PARTICLE_BITFIELD_HAS_COLLIDED) > 0)
	{
		uint frameIndex = uint(animationTime * UnpackAnimationFrameCount(particleSet));
		tileAmount = uint2(UnpackAnimationTilesX(particleSet), UnpackAnimationTilesY(particleSet));
		frameIndex = (Bitfield & PARTICLE_BITFIELD_LOOP_ANIMATION) > 0 ? (frameIndex % (tileAmount.x * tileAmount.y)) : clamp(frameIndex, uint(0), tileAmount.x * tileAmount.y);
		
		tileOffset = float2(frameIndex % tileAmount.x, frameIndex / tileAmount.x);
		tileOffset /= float2(tileAmount);
	}

	if (minMaxY.y - minMaxY.x <= 1.0f || minMaxX.y - minMaxX.x <= 1.0f)
	{
		if (vertexPos.z < LoadTex2D(gDepthBuffer, NO_SAMPLER, int2(minMaxX.y, minMaxY.y), 0).x)
		{
			RETURN();
		}

		// Sample texture
		float4 texColor = float4(0,0,0,0);
		BeginNonUniformResourceIndex(texIndex, MAX_PARTICLE_TEXTURES_COUNT);
			texColor = SampleLvlTex2D(ParticleTextures[texIndex], gSamplerBilinearClamp, float2(0.5, 0.5) / float2(tileAmount) + tileOffset, 0);
		EndNonUniformResourceIndex();

		// Modulate color
		texColor = texColor * ((particleSet.ParticleSetBitfield & PARTICLE_BITFIELD_MODULATION_TYPE_LIFETIME) > 0 ? 
			UnpackParticleColorLifetime(particleSet.StartColor, particleSet.EndColor, 1.0 - Age / particleSet.InitialAge) : 
			UnpackParticleColorSpeed(particleSet.StartColor, particleSet.EndColor, 1.0 - Age / particleSet.InitialAge, pow(speedOverMaxSpeed, PARTICLE_COLOR_OVER_SPEED_STRENGTH))); 
		
		texColor.w *= 0.2f * UnpackAlpha(particleSet, particleIdx);

		SaveTransparencyEntry(gParticleConstantBuffer.ScreenSize, uint2(minMaxX.y, minMaxY.y), texColor, vertexPos.z);

#ifdef _DEBUG
		uint foo;
		AtomicAdd(gParticleStatsBufferRW[0].VisibleParticlesCount, 1, foo);
#endif

		RETURN();
	}

	for (int y = int(minMaxY.x); y < int(minMaxY.y); y++)
	{
		for (int x = int(minMaxX.x); x < int(minMaxX.y); x++)
		{
            float2 baryCoords2D = float2(0,0);
            uint toAdd = 2;
            
            // Don't draw outside of the 2 triangles that form the quad
            if (IsPointInTriangle(float2(x, y), quadVertices[2].xy, quadVertices[1].xy, quadVertices[0].xy, baryCoords2D))
                toAdd = 0;
            else if (IsPointInTriangle(float2(x, y), quadVertices[3].xy, quadVertices[2].xy, quadVertices[0].xy, baryCoords2D))
                toAdd = 1;
            if (toAdd == 2)
                continue;
                
            float3 baryCoords = float3(baryCoords2D.x, baryCoords2D.y,0);

            float depthBufferSample = LoadTex2D(gDepthBuffer, NO_SAMPLER, int2(x, y), 0).x;
            if (vertexPos.z < depthBufferSample)
                continue;

            // Compute UVs using the barycentric coordinates we found
            baryCoords.z = 1.0f - baryCoords.x - baryCoords.y;
            uv = float2(0,0);
            for (uint i=0; i<3; i++)
                uv += quadUVs[2 - i + (i!=2 ? toAdd : 0)] * baryCoords[i];

            // Sample texture
            float4 texColor = float4(0,0,0,0);
            BeginNonUniformResourceIndex(texIndex, MAX_PARTICLE_TEXTURES_COUNT);
                texColor = SampleLvlTex2D(ParticleTextures[texIndex], gSamplerBilinearClamp, uv / float2(tileAmount) + tileOffset, 0);
            EndNonUniformResourceIndex();

			// Modulate color
            texColor = texColor * ((particleSet.ParticleSetBitfield & PARTICLE_BITFIELD_MODULATION_TYPE_LIFETIME) > 0 ?
                UnpackParticleColorLifetime(particleSet.StartColor, particleSet.EndColor, 1.0 - Age / particleSet.InitialAge) :
                UnpackParticleColorSpeed(particleSet.StartColor, particleSet.EndColor, 1.0 - Age / particleSet.InitialAge, pow(speedOverMaxSpeed, PARTICLE_COLOR_OVER_SPEED_STRENGTH)));
            texColor.w *= UnpackAlpha(particleSet, particleIdx);

            SaveTransparencyEntry(gParticleConstantBuffer.ScreenSize, uint2(x, y), texColor, vertexPos.z);
		}
	}

#ifdef _DEBUG
	uint foo;
	AtomicAdd(gParticleStatsBufferRW[0].VisibleParticlesCount, 1, foo);
#endif

	RETURN();
}
